import Head from 'next/head'
import { Inter } from '@next/font/google'
import styles from '@/pages/home.module.css'
import Header from '@/lib/components/shared/header'
import { Input } from '@/lib/components/shared'
import { ProductType } from '@/lib/models/search.model'
import ProductList from '@/lib/components/shared/product-list'
import { useProductsList } from '@/lib/contexts/product-list/use-product-list.hooks'
import { productRequests } from '@/lib/services/product-list-requests.service'
import { GetServerSidePropsContext } from 'next'
import { ProductFilter } from '@/lib/contexts/product-list/product-list.types'
import { DEFAULT_PRODUCT_FILTERS } from '@/lib/contexts/product-list'
const inter = Inter({ subsets: ['latin'] })

type Props = {
  initialProducts: ProductType[]
  initialFilters: ProductFilter
}
export default function Home({ initialProducts, initialFilters }: Props) {
  const { products, refetch, onFiltersChange } = useProductsList({
    initialProducts,
    initialFilters,
  })

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={inter.className}>
        <Header>
          <form
            onSubmit={(event) => {
              event.preventDefault()
              refetch()
            }}
          >
            <Input
              name="q"
              type="search"
              defaultValue={initialFilters.q}
              endAdornment
              onChange={onFiltersChange}
            />
          </form>
        </Header>
        {!!(products.size > 0) && (
          <section className={styles.productListSection}>
            <div className={styles.productListWrapper}>
              <ProductList products={products} />
            </div>
          </section>
        )}
      </main>
    </>
  )
}

export async function getServerSideProps(context: GetServerSidePropsContext) {
  const { query } = context
  const initialFilters = { ...DEFAULT_PRODUCT_FILTERS, ...query }
  const data = await productRequests.search(initialFilters)

  return {
    props: {
      initialProducts: data?.results,
      initialFilters,
    },
  }
}
